// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		DebugRecord:       newDebugRecord(db, opts...),
		OperationLog:      newOperationLog(db, opts...),
		ParameterFile:     newParameterFile(db, opts...),
		Plan:              newPlan(db, opts...),
		Report:            newReport(db, opts...),
		Scene:             newScene(db, opts...),
		SceneCase:         newSceneCase(db, opts...),
		SceneVariable:     newSceneVariable(db, opts...),
		Tag:               newTag(db, opts...),
		TaskInfo:          newTaskInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DebugRecord       debugRecord
	OperationLog      operationLog
	ParameterFile     parameterFile
	Plan              plan
	Report            report
	Scene             scene
	SceneCase         sceneCase
	SceneVariable     sceneVariable
	Tag               tag
	TaskInfo          taskInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		DebugRecord:       q.DebugRecord.clone(db),
		OperationLog:      q.OperationLog.clone(db),
		ParameterFile:     q.ParameterFile.clone(db),
		Plan:              q.Plan.clone(db),
		Report:            q.Report.clone(db),
		Scene:             q.Scene.clone(db),
		SceneCase:         q.SceneCase.clone(db),
		SceneVariable:     q.SceneVariable.clone(db),
		Tag:               q.Tag.clone(db),
		TaskInfo:          q.TaskInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		DebugRecord:       q.DebugRecord.replaceDB(db),
		OperationLog:      q.OperationLog.replaceDB(db),
		ParameterFile:     q.ParameterFile.replaceDB(db),
		Plan:              q.Plan.replaceDB(db),
		Report:            q.Report.replaceDB(db),
		Scene:             q.Scene.replaceDB(db),
		SceneCase:         q.SceneCase.replaceDB(db),
		SceneVariable:     q.SceneVariable.replaceDB(db),
		Tag:               q.Tag.replaceDB(db),
		TaskInfo:          q.TaskInfo.replaceDB(db),
	}
}

type queryCtx struct {
	DebugRecord       *debugRecordDo
	OperationLog      *operationLogDo
	ParameterFile     *parameterFileDo
	Plan              *planDo
	Report            *reportDo
	Scene             *sceneDo
	SceneCase         *sceneCaseDo
	SceneVariable     *sceneVariableDo
	Tag               *tagDo
	TaskInfo          *taskInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DebugRecord:       q.DebugRecord.WithContext(ctx),
		OperationLog:      q.OperationLog.WithContext(ctx),
		ParameterFile:     q.ParameterFile.WithContext(ctx),
		Plan:              q.Plan.WithContext(ctx),
		Report:            q.Report.WithContext(ctx),
		Scene:             q.Scene.WithContext(ctx),
		SceneCase:         q.SceneCase.WithContext(ctx),
		SceneVariable:     q.SceneVariable.WithContext(ctx),
		Tag:               q.Tag.WithContext(ctx),
		TaskInfo:          q.TaskInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
