// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"scene/internal/model"
)

func newDebugRecord(db *gorm.DB, opts ...gen.DOOption) debugRecord {
	_debugRecord := debugRecord{}

	_debugRecord.debugRecordDo.UseDB(db, opts...)
	_debugRecord.debugRecordDo.UseModel(&model.DebugRecord{})

	tableName := _debugRecord.debugRecordDo.TableName()
	_debugRecord.ALL = field.NewAsterisk(tableName)
	_debugRecord.ID = field.NewInt32(tableName, "id")
	_debugRecord.PlanID = field.NewInt32(tableName, "plan_id")
	_debugRecord.Status = field.NewBool(tableName, "status")
	_debugRecord.ResultInfo = field.NewString(tableName, "result_info")
	_debugRecord.CreateUserID = field.NewInt32(tableName, "create_user_id")
	_debugRecord.CreateTime = field.NewTime(tableName, "create_time")
	_debugRecord.IsDelete = field.NewBool(tableName, "is_delete")

	_debugRecord.fillFieldMap()

	return _debugRecord
}

type debugRecord struct {
	debugRecordDo debugRecordDo

	ALL          field.Asterisk
	ID           field.Int32  // 变量id
	PlanID       field.Int32  // 计划id
	Status       field.Bool   // 调试结果
	ResultInfo   field.String // Case调试详情
	CreateUserID field.Int32  // 创建人id
	CreateTime   field.Time   // 创建时间
	IsDelete     field.Bool   // 是否删除

	fieldMap map[string]field.Expr
}

func (d debugRecord) Table(newTableName string) *debugRecord {
	d.debugRecordDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d debugRecord) As(alias string) *debugRecord {
	d.debugRecordDo.DO = *(d.debugRecordDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *debugRecord) updateTableName(table string) *debugRecord {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.PlanID = field.NewInt32(table, "plan_id")
	d.Status = field.NewBool(table, "status")
	d.ResultInfo = field.NewString(table, "result_info")
	d.CreateUserID = field.NewInt32(table, "create_user_id")
	d.CreateTime = field.NewTime(table, "create_time")
	d.IsDelete = field.NewBool(table, "is_delete")

	d.fillFieldMap()

	return d
}

func (d *debugRecord) WithContext(ctx context.Context) *debugRecordDo {
	return d.debugRecordDo.WithContext(ctx)
}

func (d debugRecord) TableName() string { return d.debugRecordDo.TableName() }

func (d debugRecord) Alias() string { return d.debugRecordDo.Alias() }

func (d debugRecord) Columns(cols ...field.Expr) gen.Columns { return d.debugRecordDo.Columns(cols...) }

func (d *debugRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *debugRecord) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["plan_id"] = d.PlanID
	d.fieldMap["status"] = d.Status
	d.fieldMap["result_info"] = d.ResultInfo
	d.fieldMap["create_user_id"] = d.CreateUserID
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["is_delete"] = d.IsDelete
}

func (d debugRecord) clone(db *gorm.DB) debugRecord {
	d.debugRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d debugRecord) replaceDB(db *gorm.DB) debugRecord {
	d.debugRecordDo.ReplaceDB(db)
	return d
}

type debugRecordDo struct{ gen.DO }

func (d debugRecordDo) Debug() *debugRecordDo {
	return d.withDO(d.DO.Debug())
}

func (d debugRecordDo) WithContext(ctx context.Context) *debugRecordDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d debugRecordDo) ReadDB() *debugRecordDo {
	return d.Clauses(dbresolver.Read)
}

func (d debugRecordDo) WriteDB() *debugRecordDo {
	return d.Clauses(dbresolver.Write)
}

func (d debugRecordDo) Session(config *gorm.Session) *debugRecordDo {
	return d.withDO(d.DO.Session(config))
}

func (d debugRecordDo) Clauses(conds ...clause.Expression) *debugRecordDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d debugRecordDo) Returning(value interface{}, columns ...string) *debugRecordDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d debugRecordDo) Not(conds ...gen.Condition) *debugRecordDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d debugRecordDo) Or(conds ...gen.Condition) *debugRecordDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d debugRecordDo) Select(conds ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d debugRecordDo) Where(conds ...gen.Condition) *debugRecordDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d debugRecordDo) Order(conds ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d debugRecordDo) Distinct(cols ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d debugRecordDo) Omit(cols ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d debugRecordDo) Join(table schema.Tabler, on ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d debugRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d debugRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d debugRecordDo) Group(cols ...field.Expr) *debugRecordDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d debugRecordDo) Having(conds ...gen.Condition) *debugRecordDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d debugRecordDo) Limit(limit int) *debugRecordDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d debugRecordDo) Offset(offset int) *debugRecordDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d debugRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *debugRecordDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d debugRecordDo) Unscoped() *debugRecordDo {
	return d.withDO(d.DO.Unscoped())
}

func (d debugRecordDo) Create(values ...*model.DebugRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d debugRecordDo) CreateInBatches(values []*model.DebugRecord, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d debugRecordDo) Save(values ...*model.DebugRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d debugRecordDo) First() (*model.DebugRecord, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugRecord), nil
	}
}

func (d debugRecordDo) Take() (*model.DebugRecord, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugRecord), nil
	}
}

func (d debugRecordDo) Last() (*model.DebugRecord, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugRecord), nil
	}
}

func (d debugRecordDo) Find() ([]*model.DebugRecord, error) {
	result, err := d.DO.Find()
	return result.([]*model.DebugRecord), err
}

func (d debugRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DebugRecord, err error) {
	buf := make([]*model.DebugRecord, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d debugRecordDo) FindInBatches(result *[]*model.DebugRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d debugRecordDo) Attrs(attrs ...field.AssignExpr) *debugRecordDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d debugRecordDo) Assign(attrs ...field.AssignExpr) *debugRecordDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d debugRecordDo) Joins(fields ...field.RelationField) *debugRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d debugRecordDo) Preload(fields ...field.RelationField) *debugRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d debugRecordDo) FirstOrInit() (*model.DebugRecord, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugRecord), nil
	}
}

func (d debugRecordDo) FirstOrCreate() (*model.DebugRecord, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugRecord), nil
	}
}

func (d debugRecordDo) FindByPage(offset int, limit int) (result []*model.DebugRecord, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d debugRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d debugRecordDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d debugRecordDo) Delete(models ...*model.DebugRecord) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *debugRecordDo) withDO(do gen.Dao) *debugRecordDo {
	d.DO = *do.(*gen.DO)
	return d
}
