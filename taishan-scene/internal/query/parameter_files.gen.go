// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"scene/internal/model"
)

func newParameterFile(db *gorm.DB, opts ...gen.DOOption) parameterFile {
	_parameterFile := parameterFile{}

	_parameterFile.parameterFileDo.UseDB(db, opts...)
	_parameterFile.parameterFileDo.UseModel(&model.ParameterFile{})

	tableName := _parameterFile.parameterFileDo.TableName()
	_parameterFile.ALL = field.NewAsterisk(tableName)
	_parameterFile.ID = field.NewInt32(tableName, "id")
	_parameterFile.PlanID = field.NewInt32(tableName, "plan_id")
	_parameterFile.FileName = field.NewString(tableName, "file_name")
	_parameterFile.Size = field.NewInt32(tableName, "size")
	_parameterFile.Rows = field.NewInt32(tableName, "rows")
	_parameterFile.Column = field.NewString(tableName, "column")
	_parameterFile.Status = field.NewBool(tableName, "status")
	_parameterFile.CreateUserID = field.NewInt32(tableName, "create_user_id")
	_parameterFile.CreateTime = field.NewTime(tableName, "create_time")
	_parameterFile.UpdateUserID = field.NewInt32(tableName, "update_user_id")
	_parameterFile.UpdateTime = field.NewTime(tableName, "update_time")
	_parameterFile.IsDelete = field.NewBool(tableName, "is_delete")

	_parameterFile.fillFieldMap()

	return _parameterFile
}

type parameterFile struct {
	parameterFileDo parameterFileDo

	ALL          field.Asterisk
	ID           field.Int32
	PlanID       field.Int32  // 测试计划ID
	FileName     field.String // 文件名
	Size         field.Int32  // 文件大小
	Rows         field.Int32  // 文件行数
	Column       field.String // 文件列信息
	Status       field.Bool   // 是否启用
	CreateUserID field.Int32  // 创建人id
	CreateTime   field.Time   // 创建时间
	UpdateUserID field.Int32  // 最后修改人id
	UpdateTime   field.Time   // 最后修改时间
	IsDelete     field.Bool   // 是否删除

	fieldMap map[string]field.Expr
}

func (p parameterFile) Table(newTableName string) *parameterFile {
	p.parameterFileDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p parameterFile) As(alias string) *parameterFile {
	p.parameterFileDo.DO = *(p.parameterFileDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *parameterFile) updateTableName(table string) *parameterFile {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.PlanID = field.NewInt32(table, "plan_id")
	p.FileName = field.NewString(table, "file_name")
	p.Size = field.NewInt32(table, "size")
	p.Rows = field.NewInt32(table, "rows")
	p.Column = field.NewString(table, "column")
	p.Status = field.NewBool(table, "status")
	p.CreateUserID = field.NewInt32(table, "create_user_id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateUserID = field.NewInt32(table, "update_user_id")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDelete = field.NewBool(table, "is_delete")

	p.fillFieldMap()

	return p
}

func (p *parameterFile) WithContext(ctx context.Context) *parameterFileDo {
	return p.parameterFileDo.WithContext(ctx)
}

func (p parameterFile) TableName() string { return p.parameterFileDo.TableName() }

func (p parameterFile) Alias() string { return p.parameterFileDo.Alias() }

func (p parameterFile) Columns(cols ...field.Expr) gen.Columns {
	return p.parameterFileDo.Columns(cols...)
}

func (p *parameterFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *parameterFile) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["plan_id"] = p.PlanID
	p.fieldMap["file_name"] = p.FileName
	p.fieldMap["size"] = p.Size
	p.fieldMap["rows"] = p.Rows
	p.fieldMap["column"] = p.Column
	p.fieldMap["status"] = p.Status
	p.fieldMap["create_user_id"] = p.CreateUserID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_user_id"] = p.UpdateUserID
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_delete"] = p.IsDelete
}

func (p parameterFile) clone(db *gorm.DB) parameterFile {
	p.parameterFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p parameterFile) replaceDB(db *gorm.DB) parameterFile {
	p.parameterFileDo.ReplaceDB(db)
	return p
}

type parameterFileDo struct{ gen.DO }

func (p parameterFileDo) Debug() *parameterFileDo {
	return p.withDO(p.DO.Debug())
}

func (p parameterFileDo) WithContext(ctx context.Context) *parameterFileDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p parameterFileDo) ReadDB() *parameterFileDo {
	return p.Clauses(dbresolver.Read)
}

func (p parameterFileDo) WriteDB() *parameterFileDo {
	return p.Clauses(dbresolver.Write)
}

func (p parameterFileDo) Session(config *gorm.Session) *parameterFileDo {
	return p.withDO(p.DO.Session(config))
}

func (p parameterFileDo) Clauses(conds ...clause.Expression) *parameterFileDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p parameterFileDo) Returning(value interface{}, columns ...string) *parameterFileDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p parameterFileDo) Not(conds ...gen.Condition) *parameterFileDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p parameterFileDo) Or(conds ...gen.Condition) *parameterFileDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p parameterFileDo) Select(conds ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p parameterFileDo) Where(conds ...gen.Condition) *parameterFileDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p parameterFileDo) Order(conds ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p parameterFileDo) Distinct(cols ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p parameterFileDo) Omit(cols ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p parameterFileDo) Join(table schema.Tabler, on ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p parameterFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p parameterFileDo) RightJoin(table schema.Tabler, on ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p parameterFileDo) Group(cols ...field.Expr) *parameterFileDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p parameterFileDo) Having(conds ...gen.Condition) *parameterFileDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p parameterFileDo) Limit(limit int) *parameterFileDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p parameterFileDo) Offset(offset int) *parameterFileDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p parameterFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *parameterFileDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p parameterFileDo) Unscoped() *parameterFileDo {
	return p.withDO(p.DO.Unscoped())
}

func (p parameterFileDo) Create(values ...*model.ParameterFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p parameterFileDo) CreateInBatches(values []*model.ParameterFile, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p parameterFileDo) Save(values ...*model.ParameterFile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p parameterFileDo) First() (*model.ParameterFile, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParameterFile), nil
	}
}

func (p parameterFileDo) Take() (*model.ParameterFile, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParameterFile), nil
	}
}

func (p parameterFileDo) Last() (*model.ParameterFile, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParameterFile), nil
	}
}

func (p parameterFileDo) Find() ([]*model.ParameterFile, error) {
	result, err := p.DO.Find()
	return result.([]*model.ParameterFile), err
}

func (p parameterFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ParameterFile, err error) {
	buf := make([]*model.ParameterFile, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p parameterFileDo) FindInBatches(result *[]*model.ParameterFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p parameterFileDo) Attrs(attrs ...field.AssignExpr) *parameterFileDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p parameterFileDo) Assign(attrs ...field.AssignExpr) *parameterFileDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p parameterFileDo) Joins(fields ...field.RelationField) *parameterFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p parameterFileDo) Preload(fields ...field.RelationField) *parameterFileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p parameterFileDo) FirstOrInit() (*model.ParameterFile, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParameterFile), nil
	}
}

func (p parameterFileDo) FirstOrCreate() (*model.ParameterFile, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ParameterFile), nil
	}
}

func (p parameterFileDo) FindByPage(offset int, limit int) (result []*model.ParameterFile, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p parameterFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p parameterFileDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p parameterFileDo) Delete(models ...*model.ParameterFile) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *parameterFileDo) withDO(do gen.Dao) *parameterFileDo {
	p.DO = *do.(*gen.DO)
	return p
}
