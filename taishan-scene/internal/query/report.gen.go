// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"scene/internal/model"
)

func newReport(db *gorm.DB, opts ...gen.DOOption) report {
	_report := report{}

	_report.reportDo.UseDB(db, opts...)
	_report.reportDo.UseModel(&model.Report{})

	tableName := _report.reportDo.TableName()
	_report.ALL = field.NewAsterisk(tableName)
	_report.ID = field.NewInt32(tableName, "id")
	_report.ReportName = field.NewString(tableName, "report_name")
	_report.PlanID = field.NewInt32(tableName, "plan_id")
	_report.Status = field.NewBool(tableName, "status")
	_report.Duration = field.NewInt32(tableName, "duration")
	_report.PressType = field.NewInt32(tableName, "press_type")
	_report.EngineList = field.NewField(tableName, "engine_list")
	_report.Concurrency = field.NewInt32(tableName, "concurrency")
	_report.Vum = field.NewInt32(tableName, "vum")
	_report.CreateUserID = field.NewInt32(tableName, "create_user_id")
	_report.UpdateUserID = field.NewInt32(tableName, "update_user_id")
	_report.CreateTime = field.NewTime(tableName, "create_time")
	_report.UpdateTime = field.NewTime(tableName, "update_time")
	_report.EndTime = field.NewTime(tableName, "end_time")
	_report.IsDelete = field.NewBool(tableName, "is_delete")

	_report.fillFieldMap()

	return _report
}

type report struct {
	reportDo reportDo

	ALL          field.Asterisk
	ID           field.Int32  // 测试报告id
	ReportName   field.String // 测试报告名
	PlanID       field.Int32  // 测试计划id
	Status       field.Bool   // 测试报告状态
	Duration     field.Int32  // 预计持续时间
	PressType    field.Int32  // 压测模式
	EngineList   field.Field  // 施压机ip列表
	Concurrency  field.Int32  // 起始并发数
	Vum          field.Int32  // Vum
	CreateUserID field.Int32  // 创建人id
	UpdateUserID field.Int32  // 最后修改人id
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 最后修改时间
	EndTime      field.Time   // 结束时间
	IsDelete     field.Bool   // 是否删除

	fieldMap map[string]field.Expr
}

func (r report) Table(newTableName string) *report {
	r.reportDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r report) As(alias string) *report {
	r.reportDo.DO = *(r.reportDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *report) updateTableName(table string) *report {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.ReportName = field.NewString(table, "report_name")
	r.PlanID = field.NewInt32(table, "plan_id")
	r.Status = field.NewBool(table, "status")
	r.Duration = field.NewInt32(table, "duration")
	r.PressType = field.NewInt32(table, "press_type")
	r.EngineList = field.NewField(table, "engine_list")
	r.Concurrency = field.NewInt32(table, "concurrency")
	r.Vum = field.NewInt32(table, "vum")
	r.CreateUserID = field.NewInt32(table, "create_user_id")
	r.UpdateUserID = field.NewInt32(table, "update_user_id")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")
	r.EndTime = field.NewTime(table, "end_time")
	r.IsDelete = field.NewBool(table, "is_delete")

	r.fillFieldMap()

	return r
}

func (r *report) WithContext(ctx context.Context) *reportDo { return r.reportDo.WithContext(ctx) }

func (r report) TableName() string { return r.reportDo.TableName() }

func (r report) Alias() string { return r.reportDo.Alias() }

func (r report) Columns(cols ...field.Expr) gen.Columns { return r.reportDo.Columns(cols...) }

func (r *report) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *report) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["id"] = r.ID
	r.fieldMap["report_name"] = r.ReportName
	r.fieldMap["plan_id"] = r.PlanID
	r.fieldMap["status"] = r.Status
	r.fieldMap["duration"] = r.Duration
	r.fieldMap["press_type"] = r.PressType
	r.fieldMap["engine_list"] = r.EngineList
	r.fieldMap["concurrency"] = r.Concurrency
	r.fieldMap["vum"] = r.Vum
	r.fieldMap["create_user_id"] = r.CreateUserID
	r.fieldMap["update_user_id"] = r.UpdateUserID
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
	r.fieldMap["end_time"] = r.EndTime
	r.fieldMap["is_delete"] = r.IsDelete
}

func (r report) clone(db *gorm.DB) report {
	r.reportDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r report) replaceDB(db *gorm.DB) report {
	r.reportDo.ReplaceDB(db)
	return r
}

type reportDo struct{ gen.DO }

func (r reportDo) Debug() *reportDo {
	return r.withDO(r.DO.Debug())
}

func (r reportDo) WithContext(ctx context.Context) *reportDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportDo) ReadDB() *reportDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportDo) WriteDB() *reportDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportDo) Session(config *gorm.Session) *reportDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportDo) Clauses(conds ...clause.Expression) *reportDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportDo) Returning(value interface{}, columns ...string) *reportDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportDo) Not(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportDo) Or(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportDo) Select(conds ...field.Expr) *reportDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportDo) Where(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportDo) Order(conds ...field.Expr) *reportDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportDo) Distinct(cols ...field.Expr) *reportDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportDo) Omit(cols ...field.Expr) *reportDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportDo) Join(table schema.Tabler, on ...field.Expr) *reportDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportDo) Group(cols ...field.Expr) *reportDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportDo) Having(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportDo) Limit(limit int) *reportDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportDo) Offset(offset int) *reportDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportDo) Unscoped() *reportDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportDo) Create(values ...*model.Report) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportDo) CreateInBatches(values []*model.Report, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportDo) Save(values ...*model.Report) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportDo) First() (*model.Report, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) Take() (*model.Report, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) Last() (*model.Report, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) Find() ([]*model.Report, error) {
	result, err := r.DO.Find()
	return result.([]*model.Report), err
}

func (r reportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Report, err error) {
	buf := make([]*model.Report, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportDo) FindInBatches(result *[]*model.Report, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportDo) Attrs(attrs ...field.AssignExpr) *reportDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportDo) Assign(attrs ...field.AssignExpr) *reportDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportDo) Joins(fields ...field.RelationField) *reportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportDo) Preload(fields ...field.RelationField) *reportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportDo) FirstOrInit() (*model.Report, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) FirstOrCreate() (*model.Report, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) FindByPage(offset int, limit int) (result []*model.Report, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportDo) Delete(models ...*model.Report) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportDo) withDO(do gen.Dao) *reportDo {
	r.DO = *do.(*gen.DO)
	return r
}
