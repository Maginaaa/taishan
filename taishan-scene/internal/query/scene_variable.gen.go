// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"scene/internal/model"
)

func newSceneVariable(db *gorm.DB, opts ...gen.DOOption) sceneVariable {
	_sceneVariable := sceneVariable{}

	_sceneVariable.sceneVariableDo.UseDB(db, opts...)
	_sceneVariable.sceneVariableDo.UseModel(&model.SceneVariable{})

	tableName := _sceneVariable.sceneVariableDo.TableName()
	_sceneVariable.ALL = field.NewAsterisk(tableName)
	_sceneVariable.ID = field.NewInt32(tableName, "id")
	_sceneVariable.SceneID = field.NewInt32(tableName, "scene_id")
	_sceneVariable.VariableName = field.NewString(tableName, "variable_name")
	_sceneVariable.VariableVal = field.NewString(tableName, "variable_val")
	_sceneVariable.Remark = field.NewString(tableName, "remark")
	_sceneVariable.CreateUserID = field.NewInt32(tableName, "create_user_id")
	_sceneVariable.UpdateUserID = field.NewInt32(tableName, "update_user_id")
	_sceneVariable.CreateTime = field.NewTime(tableName, "create_time")
	_sceneVariable.UpdateTime = field.NewTime(tableName, "update_time")
	_sceneVariable.IsDelete = field.NewBool(tableName, "is_delete")

	_sceneVariable.fillFieldMap()

	return _sceneVariable
}

type sceneVariable struct {
	sceneVariableDo sceneVariableDo

	ALL          field.Asterisk
	ID           field.Int32  // 变量id
	SceneID      field.Int32  // 所属场景id
	VariableName field.String // 变量名
	VariableVal  field.String // 变量值
	Remark       field.String // 描述
	CreateUserID field.Int32  // 创建人id
	UpdateUserID field.Int32  // 修改人id
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 修改时间
	IsDelete     field.Bool   // 是否删除

	fieldMap map[string]field.Expr
}

func (s sceneVariable) Table(newTableName string) *sceneVariable {
	s.sceneVariableDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneVariable) As(alias string) *sceneVariable {
	s.sceneVariableDo.DO = *(s.sceneVariableDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneVariable) updateTableName(table string) *sceneVariable {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SceneID = field.NewInt32(table, "scene_id")
	s.VariableName = field.NewString(table, "variable_name")
	s.VariableVal = field.NewString(table, "variable_val")
	s.Remark = field.NewString(table, "remark")
	s.CreateUserID = field.NewInt32(table, "create_user_id")
	s.UpdateUserID = field.NewInt32(table, "update_user_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDelete = field.NewBool(table, "is_delete")

	s.fillFieldMap()

	return s
}

func (s *sceneVariable) WithContext(ctx context.Context) *sceneVariableDo {
	return s.sceneVariableDo.WithContext(ctx)
}

func (s sceneVariable) TableName() string { return s.sceneVariableDo.TableName() }

func (s sceneVariable) Alias() string { return s.sceneVariableDo.Alias() }

func (s sceneVariable) Columns(cols ...field.Expr) gen.Columns {
	return s.sceneVariableDo.Columns(cols...)
}

func (s *sceneVariable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneVariable) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["scene_id"] = s.SceneID
	s.fieldMap["variable_name"] = s.VariableName
	s.fieldMap["variable_val"] = s.VariableVal
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_user_id"] = s.CreateUserID
	s.fieldMap["update_user_id"] = s.UpdateUserID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_delete"] = s.IsDelete
}

func (s sceneVariable) clone(db *gorm.DB) sceneVariable {
	s.sceneVariableDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneVariable) replaceDB(db *gorm.DB) sceneVariable {
	s.sceneVariableDo.ReplaceDB(db)
	return s
}

type sceneVariableDo struct{ gen.DO }

func (s sceneVariableDo) Debug() *sceneVariableDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneVariableDo) WithContext(ctx context.Context) *sceneVariableDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneVariableDo) ReadDB() *sceneVariableDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneVariableDo) WriteDB() *sceneVariableDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneVariableDo) Session(config *gorm.Session) *sceneVariableDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneVariableDo) Clauses(conds ...clause.Expression) *sceneVariableDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneVariableDo) Returning(value interface{}, columns ...string) *sceneVariableDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneVariableDo) Not(conds ...gen.Condition) *sceneVariableDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneVariableDo) Or(conds ...gen.Condition) *sceneVariableDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneVariableDo) Select(conds ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneVariableDo) Where(conds ...gen.Condition) *sceneVariableDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneVariableDo) Order(conds ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneVariableDo) Distinct(cols ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneVariableDo) Omit(cols ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneVariableDo) Join(table schema.Tabler, on ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneVariableDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneVariableDo) RightJoin(table schema.Tabler, on ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneVariableDo) Group(cols ...field.Expr) *sceneVariableDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneVariableDo) Having(conds ...gen.Condition) *sceneVariableDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneVariableDo) Limit(limit int) *sceneVariableDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneVariableDo) Offset(offset int) *sceneVariableDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneVariableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sceneVariableDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneVariableDo) Unscoped() *sceneVariableDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneVariableDo) Create(values ...*model.SceneVariable) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneVariableDo) CreateInBatches(values []*model.SceneVariable, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneVariableDo) Save(values ...*model.SceneVariable) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneVariableDo) First() (*model.SceneVariable, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneVariable), nil
	}
}

func (s sceneVariableDo) Take() (*model.SceneVariable, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneVariable), nil
	}
}

func (s sceneVariableDo) Last() (*model.SceneVariable, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneVariable), nil
	}
}

func (s sceneVariableDo) Find() ([]*model.SceneVariable, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneVariable), err
}

func (s sceneVariableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneVariable, err error) {
	buf := make([]*model.SceneVariable, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneVariableDo) FindInBatches(result *[]*model.SceneVariable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneVariableDo) Attrs(attrs ...field.AssignExpr) *sceneVariableDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneVariableDo) Assign(attrs ...field.AssignExpr) *sceneVariableDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneVariableDo) Joins(fields ...field.RelationField) *sceneVariableDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneVariableDo) Preload(fields ...field.RelationField) *sceneVariableDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneVariableDo) FirstOrInit() (*model.SceneVariable, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneVariable), nil
	}
}

func (s sceneVariableDo) FirstOrCreate() (*model.SceneVariable, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneVariable), nil
	}
}

func (s sceneVariableDo) FindByPage(offset int, limit int) (result []*model.SceneVariable, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneVariableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneVariableDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneVariableDo) Delete(models ...*model.SceneVariable) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneVariableDo) withDO(do gen.Dao) *sceneVariableDo {
	s.DO = *do.(*gen.DO)
	return s
}
