// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"scene/internal/model"
)

func newTaskInfo(db *gorm.DB, opts ...gen.DOOption) taskInfo {
	_taskInfo := taskInfo{}

	_taskInfo.taskInfoDo.UseDB(db, opts...)
	_taskInfo.taskInfoDo.UseModel(&model.TaskInfo{})

	tableName := _taskInfo.taskInfoDo.TableName()
	_taskInfo.ALL = field.NewAsterisk(tableName)
	_taskInfo.ID = field.NewInt32(tableName, "id")
	_taskInfo.Type = field.NewInt32(tableName, "type")
	_taskInfo.Cron = field.NewString(tableName, "cron")
	_taskInfo.TaskInfo = field.NewString(tableName, "task_info")
	_taskInfo.Enable = field.NewBool(tableName, "enable")
	_taskInfo.CreateUserID = field.NewInt32(tableName, "create_user_id")
	_taskInfo.UpdateUserID = field.NewInt32(tableName, "update_user_id")
	_taskInfo.CreateTime = field.NewTime(tableName, "create_time")
	_taskInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_taskInfo.IsDelete = field.NewBool(tableName, "is_delete")

	_taskInfo.fillFieldMap()

	return _taskInfo
}

type taskInfo struct {
	taskInfoDo taskInfoDo

	ALL          field.Asterisk
	ID           field.Int32
	Type         field.Int32  // 脚本类型
	Cron         field.String // 执行cron表达式
	TaskInfo     field.String // 脚本信息
	Enable       field.Bool   // 是否启用
	CreateUserID field.Int32  // 创建人id
	UpdateUserID field.Int32  // 更新人id
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	IsDelete     field.Bool   // 是否删除

	fieldMap map[string]field.Expr
}

func (t taskInfo) Table(newTableName string) *taskInfo {
	t.taskInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskInfo) As(alias string) *taskInfo {
	t.taskInfoDo.DO = *(t.taskInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskInfo) updateTableName(table string) *taskInfo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Type = field.NewInt32(table, "type")
	t.Cron = field.NewString(table, "cron")
	t.TaskInfo = field.NewString(table, "task_info")
	t.Enable = field.NewBool(table, "enable")
	t.CreateUserID = field.NewInt32(table, "create_user_id")
	t.UpdateUserID = field.NewInt32(table, "update_user_id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.IsDelete = field.NewBool(table, "is_delete")

	t.fillFieldMap()

	return t
}

func (t *taskInfo) WithContext(ctx context.Context) *taskInfoDo { return t.taskInfoDo.WithContext(ctx) }

func (t taskInfo) TableName() string { return t.taskInfoDo.TableName() }

func (t taskInfo) Alias() string { return t.taskInfoDo.Alias() }

func (t taskInfo) Columns(cols ...field.Expr) gen.Columns { return t.taskInfoDo.Columns(cols...) }

func (t *taskInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["type"] = t.Type
	t.fieldMap["cron"] = t.Cron
	t.fieldMap["task_info"] = t.TaskInfo
	t.fieldMap["enable"] = t.Enable
	t.fieldMap["create_user_id"] = t.CreateUserID
	t.fieldMap["update_user_id"] = t.UpdateUserID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["is_delete"] = t.IsDelete
}

func (t taskInfo) clone(db *gorm.DB) taskInfo {
	t.taskInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskInfo) replaceDB(db *gorm.DB) taskInfo {
	t.taskInfoDo.ReplaceDB(db)
	return t
}

type taskInfoDo struct{ gen.DO }

func (t taskInfoDo) Debug() *taskInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t taskInfoDo) WithContext(ctx context.Context) *taskInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskInfoDo) ReadDB() *taskInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskInfoDo) WriteDB() *taskInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskInfoDo) Session(config *gorm.Session) *taskInfoDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskInfoDo) Clauses(conds ...clause.Expression) *taskInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskInfoDo) Returning(value interface{}, columns ...string) *taskInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskInfoDo) Not(conds ...gen.Condition) *taskInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskInfoDo) Or(conds ...gen.Condition) *taskInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskInfoDo) Select(conds ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskInfoDo) Where(conds ...gen.Condition) *taskInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskInfoDo) Order(conds ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskInfoDo) Distinct(cols ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskInfoDo) Omit(cols ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskInfoDo) Join(table schema.Tabler, on ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskInfoDo) Group(cols ...field.Expr) *taskInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskInfoDo) Having(conds ...gen.Condition) *taskInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskInfoDo) Limit(limit int) *taskInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskInfoDo) Offset(offset int) *taskInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskInfoDo) Unscoped() *taskInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskInfoDo) Create(values ...*model.TaskInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskInfoDo) CreateInBatches(values []*model.TaskInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskInfoDo) Save(values ...*model.TaskInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskInfoDo) First() (*model.TaskInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) Take() (*model.TaskInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) Last() (*model.TaskInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) Find() ([]*model.TaskInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskInfo), err
}

func (t taskInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskInfo, err error) {
	buf := make([]*model.TaskInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskInfoDo) FindInBatches(result *[]*model.TaskInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskInfoDo) Attrs(attrs ...field.AssignExpr) *taskInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskInfoDo) Assign(attrs ...field.AssignExpr) *taskInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskInfoDo) Joins(fields ...field.RelationField) *taskInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskInfoDo) Preload(fields ...field.RelationField) *taskInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskInfoDo) FirstOrInit() (*model.TaskInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) FirstOrCreate() (*model.TaskInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskInfo), nil
	}
}

func (t taskInfoDo) FindByPage(offset int, limit int) (result []*model.TaskInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskInfoDo) Delete(models ...*model.TaskInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskInfoDo) withDO(do gen.Dao) *taskInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
