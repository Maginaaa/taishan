// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"data/internal/model"
)

func newSceneCase(db *gorm.DB, opts ...gen.DOOption) sceneCase {
	_sceneCase := sceneCase{}

	_sceneCase.sceneCaseDo.UseDB(db, opts...)
	_sceneCase.sceneCaseDo.UseModel(&model.SceneCase{})

	tableName := _sceneCase.sceneCaseDo.TableName()
	_sceneCase.ALL = field.NewAsterisk(tableName)
	_sceneCase.ID = field.NewInt32(tableName, "id")
	_sceneCase.ParentID = field.NewInt32(tableName, "parent_id")
	_sceneCase.Type = field.NewInt32(tableName, "type")
	_sceneCase.SceneID = field.NewInt32(tableName, "scene_id")
	_sceneCase.Sort = field.NewInt32(tableName, "sort")
	_sceneCase.Disabled = field.NewBool(tableName, "disabled")
	_sceneCase.Extend = field.NewString(tableName, "extend")
	_sceneCase.CreateTime = field.NewTime(tableName, "create_time")
	_sceneCase.UpdateTime = field.NewTime(tableName, "update_time")
	_sceneCase.IsDelete = field.NewBool(tableName, "is_delete")

	_sceneCase.fillFieldMap()

	return _sceneCase
}

type sceneCase struct {
	sceneCaseDo sceneCaseDo

	ALL        field.Asterisk
	ID         field.Int32 // Case ID
	ParentID   field.Int32 // 父节点id
	Type       field.Int32 // case类型
	SceneID    field.Int32 // 所属场景id
	Sort       field.Int32 // 排序
	Disabled   field.Bool  // 是否禁用
	Extend     field.String
	CreateTime field.Time // 创建时间
	UpdateTime field.Time // 最后修改时间
	IsDelete   field.Bool // 是否删除

	fieldMap map[string]field.Expr
}

func (s sceneCase) Table(newTableName string) *sceneCase {
	s.sceneCaseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneCase) As(alias string) *sceneCase {
	s.sceneCaseDo.DO = *(s.sceneCaseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneCase) updateTableName(table string) *sceneCase {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.ParentID = field.NewInt32(table, "parent_id")
	s.Type = field.NewInt32(table, "type")
	s.SceneID = field.NewInt32(table, "scene_id")
	s.Sort = field.NewInt32(table, "sort")
	s.Disabled = field.NewBool(table, "disabled")
	s.Extend = field.NewString(table, "extend")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDelete = field.NewBool(table, "is_delete")

	s.fillFieldMap()

	return s
}

func (s *sceneCase) WithContext(ctx context.Context) *sceneCaseDo {
	return s.sceneCaseDo.WithContext(ctx)
}

func (s sceneCase) TableName() string { return s.sceneCaseDo.TableName() }

func (s sceneCase) Alias() string { return s.sceneCaseDo.Alias() }

func (s sceneCase) Columns(cols ...field.Expr) gen.Columns { return s.sceneCaseDo.Columns(cols...) }

func (s *sceneCase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneCase) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["type"] = s.Type
	s.fieldMap["scene_id"] = s.SceneID
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["disabled"] = s.Disabled
	s.fieldMap["extend"] = s.Extend
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_delete"] = s.IsDelete
}

func (s sceneCase) clone(db *gorm.DB) sceneCase {
	s.sceneCaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneCase) replaceDB(db *gorm.DB) sceneCase {
	s.sceneCaseDo.ReplaceDB(db)
	return s
}

type sceneCaseDo struct{ gen.DO }

func (s sceneCaseDo) Debug() *sceneCaseDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneCaseDo) WithContext(ctx context.Context) *sceneCaseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneCaseDo) ReadDB() *sceneCaseDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneCaseDo) WriteDB() *sceneCaseDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneCaseDo) Session(config *gorm.Session) *sceneCaseDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneCaseDo) Clauses(conds ...clause.Expression) *sceneCaseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneCaseDo) Returning(value interface{}, columns ...string) *sceneCaseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneCaseDo) Not(conds ...gen.Condition) *sceneCaseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneCaseDo) Or(conds ...gen.Condition) *sceneCaseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneCaseDo) Select(conds ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneCaseDo) Where(conds ...gen.Condition) *sceneCaseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneCaseDo) Order(conds ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneCaseDo) Distinct(cols ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneCaseDo) Omit(cols ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneCaseDo) Join(table schema.Tabler, on ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneCaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneCaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneCaseDo) Group(cols ...field.Expr) *sceneCaseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneCaseDo) Having(conds ...gen.Condition) *sceneCaseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneCaseDo) Limit(limit int) *sceneCaseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneCaseDo) Offset(offset int) *sceneCaseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneCaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sceneCaseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneCaseDo) Unscoped() *sceneCaseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneCaseDo) Create(values ...*model.SceneCase) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneCaseDo) CreateInBatches(values []*model.SceneCase, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneCaseDo) Save(values ...*model.SceneCase) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneCaseDo) First() (*model.SceneCase, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneCase), nil
	}
}

func (s sceneCaseDo) Take() (*model.SceneCase, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneCase), nil
	}
}

func (s sceneCaseDo) Last() (*model.SceneCase, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneCase), nil
	}
}

func (s sceneCaseDo) Find() ([]*model.SceneCase, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneCase), err
}

func (s sceneCaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneCase, err error) {
	buf := make([]*model.SceneCase, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneCaseDo) FindInBatches(result *[]*model.SceneCase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneCaseDo) Attrs(attrs ...field.AssignExpr) *sceneCaseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneCaseDo) Assign(attrs ...field.AssignExpr) *sceneCaseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneCaseDo) Joins(fields ...field.RelationField) *sceneCaseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneCaseDo) Preload(fields ...field.RelationField) *sceneCaseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneCaseDo) FirstOrInit() (*model.SceneCase, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneCase), nil
	}
}

func (s sceneCaseDo) FirstOrCreate() (*model.SceneCase, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneCase), nil
	}
}

func (s sceneCaseDo) FindByPage(offset int, limit int) (result []*model.SceneCase, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneCaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneCaseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneCaseDo) Delete(models ...*model.SceneCase) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneCaseDo) withDO(do gen.Dao) *sceneCaseDo {
	s.DO = *do.(*gen.DO)
	return s
}
