// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"data/internal/model"
)

func newPlan(db *gorm.DB, opts ...gen.DOOption) plan {
	_plan := plan{}

	_plan.planDo.UseDB(db, opts...)
	_plan.planDo.UseModel(&model.Plan{})

	tableName := _plan.planDo.TableName()
	_plan.ALL = field.NewAsterisk(tableName)
	_plan.ID = field.NewInt32(tableName, "id")
	_plan.PlanName = field.NewString(tableName, "plan_name")
	_plan.EngineCount = field.NewInt32(tableName, "engine_count")
	_plan.PressInfo = field.NewString(tableName, "press_info")
	_plan.GlobalVariable = field.NewString(tableName, "global_variable")
	_plan.DefaultHeader = field.NewString(tableName, "default_header")
	_plan.SamplingInfo = field.NewString(tableName, "sampling_info")
	_plan.BreakType = field.NewInt32(tableName, "break_type")
	_plan.BreakValue = field.NewFloat32(tableName, "break_value")
	_plan.TaskID = field.NewInt32(tableName, "task_id")
	_plan.Remark = field.NewString(tableName, "remark")
	_plan.DebugStatus = field.NewBool(tableName, "debug_status")
	_plan.CreateUserID = field.NewInt32(tableName, "create_user_id")
	_plan.UpdateUserID = field.NewInt32(tableName, "update_user_id")
	_plan.CreateTime = field.NewTime(tableName, "create_time")
	_plan.UpdateTime = field.NewTime(tableName, "update_time")
	_plan.IsDelete = field.NewBool(tableName, "is_delete")

	_plan.fillFieldMap()

	return _plan
}

type plan struct {
	planDo planDo

	ALL            field.Asterisk
	ID             field.Int32   // 测试计划id
	PlanName       field.String  // 测试计划名称
	EngineCount    field.Int32   // 压测机数量
	PressInfo      field.String  // 施压策略
	GlobalVariable field.String  // 全局变量
	DefaultHeader  field.String  // 默认请求头
	SamplingInfo   field.String  // 采样策略
	BreakType      field.Int32   // 熔断机制类型
	BreakValue     field.Float32 // 熔断阈值
	TaskID         field.Int32   // 定时任务id
	Remark         field.String  // 备注
	DebugStatus    field.Bool    // 是否调试通过
	CreateUserID   field.Int32   // 创建人id
	UpdateUserID   field.Int32   // 最后修改人id
	CreateTime     field.Time    // 创建时间
	UpdateTime     field.Time    // 最后修改时间
	IsDelete       field.Bool    // 是否删除

	fieldMap map[string]field.Expr
}

func (p plan) Table(newTableName string) *plan {
	p.planDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plan) As(alias string) *plan {
	p.planDo.DO = *(p.planDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plan) updateTableName(table string) *plan {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.PlanName = field.NewString(table, "plan_name")
	p.EngineCount = field.NewInt32(table, "engine_count")
	p.PressInfo = field.NewString(table, "press_info")
	p.GlobalVariable = field.NewString(table, "global_variable")
	p.DefaultHeader = field.NewString(table, "default_header")
	p.SamplingInfo = field.NewString(table, "sampling_info")
	p.BreakType = field.NewInt32(table, "break_type")
	p.BreakValue = field.NewFloat32(table, "break_value")
	p.TaskID = field.NewInt32(table, "task_id")
	p.Remark = field.NewString(table, "remark")
	p.DebugStatus = field.NewBool(table, "debug_status")
	p.CreateUserID = field.NewInt32(table, "create_user_id")
	p.UpdateUserID = field.NewInt32(table, "update_user_id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDelete = field.NewBool(table, "is_delete")

	p.fillFieldMap()

	return p
}

func (p *plan) WithContext(ctx context.Context) *planDo { return p.planDo.WithContext(ctx) }

func (p plan) TableName() string { return p.planDo.TableName() }

func (p plan) Alias() string { return p.planDo.Alias() }

func (p plan) Columns(cols ...field.Expr) gen.Columns { return p.planDo.Columns(cols...) }

func (p *plan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plan) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["plan_name"] = p.PlanName
	p.fieldMap["engine_count"] = p.EngineCount
	p.fieldMap["press_info"] = p.PressInfo
	p.fieldMap["global_variable"] = p.GlobalVariable
	p.fieldMap["default_header"] = p.DefaultHeader
	p.fieldMap["sampling_info"] = p.SamplingInfo
	p.fieldMap["break_type"] = p.BreakType
	p.fieldMap["break_value"] = p.BreakValue
	p.fieldMap["task_id"] = p.TaskID
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["debug_status"] = p.DebugStatus
	p.fieldMap["create_user_id"] = p.CreateUserID
	p.fieldMap["update_user_id"] = p.UpdateUserID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_delete"] = p.IsDelete
}

func (p plan) clone(db *gorm.DB) plan {
	p.planDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plan) replaceDB(db *gorm.DB) plan {
	p.planDo.ReplaceDB(db)
	return p
}

type planDo struct{ gen.DO }

func (p planDo) Debug() *planDo {
	return p.withDO(p.DO.Debug())
}

func (p planDo) WithContext(ctx context.Context) *planDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p planDo) ReadDB() *planDo {
	return p.Clauses(dbresolver.Read)
}

func (p planDo) WriteDB() *planDo {
	return p.Clauses(dbresolver.Write)
}

func (p planDo) Session(config *gorm.Session) *planDo {
	return p.withDO(p.DO.Session(config))
}

func (p planDo) Clauses(conds ...clause.Expression) *planDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p planDo) Returning(value interface{}, columns ...string) *planDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p planDo) Not(conds ...gen.Condition) *planDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p planDo) Or(conds ...gen.Condition) *planDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p planDo) Select(conds ...field.Expr) *planDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p planDo) Where(conds ...gen.Condition) *planDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p planDo) Order(conds ...field.Expr) *planDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p planDo) Distinct(cols ...field.Expr) *planDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p planDo) Omit(cols ...field.Expr) *planDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p planDo) Join(table schema.Tabler, on ...field.Expr) *planDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p planDo) LeftJoin(table schema.Tabler, on ...field.Expr) *planDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p planDo) RightJoin(table schema.Tabler, on ...field.Expr) *planDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p planDo) Group(cols ...field.Expr) *planDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p planDo) Having(conds ...gen.Condition) *planDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p planDo) Limit(limit int) *planDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p planDo) Offset(offset int) *planDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p planDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *planDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p planDo) Unscoped() *planDo {
	return p.withDO(p.DO.Unscoped())
}

func (p planDo) Create(values ...*model.Plan) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p planDo) CreateInBatches(values []*model.Plan, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p planDo) Save(values ...*model.Plan) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p planDo) First() (*model.Plan, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plan), nil
	}
}

func (p planDo) Take() (*model.Plan, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plan), nil
	}
}

func (p planDo) Last() (*model.Plan, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plan), nil
	}
}

func (p planDo) Find() ([]*model.Plan, error) {
	result, err := p.DO.Find()
	return result.([]*model.Plan), err
}

func (p planDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Plan, err error) {
	buf := make([]*model.Plan, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p planDo) FindInBatches(result *[]*model.Plan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p planDo) Attrs(attrs ...field.AssignExpr) *planDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p planDo) Assign(attrs ...field.AssignExpr) *planDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p planDo) Joins(fields ...field.RelationField) *planDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p planDo) Preload(fields ...field.RelationField) *planDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p planDo) FirstOrInit() (*model.Plan, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plan), nil
	}
}

func (p planDo) FirstOrCreate() (*model.Plan, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plan), nil
	}
}

func (p planDo) FindByPage(offset int, limit int) (result []*model.Plan, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p planDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p planDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p planDo) Delete(models ...*model.Plan) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *planDo) withDO(do gen.Dao) *planDo {
	p.DO = *do.(*gen.DO)
	return p
}
